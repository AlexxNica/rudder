<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

  <bean id="variableSpecParser" class="com.normation.cfclerk.services.domain.VariableSpecParser"/>

  <bean id="variableParser" class="com.normation.cfclerk.services.domain.VariableParser">
    <constructor-arg ref = "variableSpecParser" />
  </bean>
  
  <bean id="rudderVariableSpecParser" class="com.normation.rudder.services.domain.RudderVariableSpecParser">
  </bean>

  <bean id="rudderVariableParser" class="com.normation.rudder.services.domain.RudderVariableParser">
    <constructor-arg ref = "rudderVariableSpecParser" />
    <constructor-arg ref = "variableParser" />
  </bean>
  
  <bean id="policyBindingParser" class="com.normation.rudder.services.domain.PolicyBindingParser">
    <constructor-arg ref = "rudderVariableParser" />
  </bean>
  
  <bean id="reportsInfoDirectiveParser" class="com.normation.rudder.services.domain.ReportsInfoDirectiveParser">
    <constructor-arg ref = "rudderVariableParser" />
  </bean>
<!-- 
  <bean id="rootNodeParser" class="com.normation.rudder.services.domain.RootNodeParser">
    <constructor-arg ref = "rudderDirectiveParser" />
  </bean>

  <bean id="serverParser" class="com.normation.rudder.services.domain.NodeParser">
    <constructor-arg ref = "rudderDirectiveParser" />
  </bean> -->
    
  <bean id="tmlParser" class="com.normation.cfclerk.services.domain.Cf3PromisesFileTemplateParser">
    <constructor-arg ref = "rudderVariableSpecParser" />
  </bean> 
  <bean id="policyParser" class="com.normation.cfclerk.services.domain.TechniqueParser">
    <constructor-arg ref = "tmlParser" />
  </bean>
  <bean id="rudderDirectiveParser" class="com.normation.rudder.services.domain.RudderDirectiveParser">
    <constructor-arg ref = "rudderVariableParser" />
  </bean>  

  <bean id="policyBindingsRepository" class="com.normation.rudder.repository.DummyPolicyBindingsRepository"/>
  
  
  <bean id="policyPackageReader" class="com.normation.rudder.services.policies.DummyTechniqueReader"/>

  <bean id="machineRepository" class="com.normation.rudder.repository.xml.NodeRepositoryXML" scope="prototype">
    <constructor-arg  ref="rootNodeParser"/>
    <constructor-arg  ref="serverParser"/>
    <constructor-arg  value="src/test/resources/testConfig.xml"/>
    <constructor-arg  value="true"/>
  </bean>
 

  <bean id="pathComputer" class="com.normation.rudder.services.path.PathComputerImpl">
    <constructor-arg ref="machineRepository"/>
    <constructor-arg name="baseFolder"  value="/baseFolder/"/>
   <constructor-arg name="backupFolder"  value="/backup/"/>
  </bean>

  <bean id="policyTranslator" class="com.normation.rudder.services.policies.DummyPolicyTranslator"/>

  <bean id="techniqueRepository" class="com.normation.rudder.services.policies.DummyPolicyService" lazy-init="true">
  </bean>

  <bean id="machineService" class="com.normation.rudder.services.servers.NodeServiceImpl">
    <constructor-arg ref = "policyTranslator" />
    <constructor-arg ref="machineRepository"/>
    <constructor-arg ref="techniqueRepository"/>
    <constructor-arg ref="directiveAdapter"/>
    <constructor-arg ref="eventLogService"/>
    <constructor-arg value="/tmp/rudder-tests/var/rudder/lock/"/>
  </bean>
  
  <bean id="directiveAdapter" class="com.normation.cfclerk.adapters.DirectiveAdapter">
   <constructor-arg ref="techniqueRepository"/>
  </bean>
  
  
  <!--  Reporting part -->
  <bean id="reportingService" class="com.normation.rudder.services.reports.ReportingServiceImpl">
   <constructor-arg ref="machineRepository"/>
   <constructor-arg ref="reportsInfoRepository"/>
   <constructor-arg ref="configurationExpectedRepo"/>
   <constructor-arg ref="operationExpectedRepo"/>
   <constructor-arg ref="reportsRepository"/>   
  </bean>
  
   <bean id="reportsInfoRepository" class="com.normation.rudder.repository.xml.ReportsInfoRepositoryXML" lazy-init="true" scope="singleton"  init-method="loadReportsInfo">
    <constructor-arg ref="reportsInfoDirectiveParser"/>
    <constructor-arg  value="src/test/resources/reportsInfo.xml"/>
    <constructor-arg  value="true"/>
  </bean>
  
  <bean id="confExpectedRepo" class="com.normation.rudder.repository.inMemory.InMemoryRuleExpectedReportsRepository" lazy-init="true" scope="singleton" />

  <bean id="opExpectedRepo" class="com.normation.rudder.repository.inMemory.InMemoryOperationExpectedReportsRepository" lazy-init="true" scope="singleton" />

  <bean id="configurationExpectedRepo" class="com.normation.rudder.repository.jdbc.RuleExpectedReportsJdbcRepository" lazy-init="true" scope="singleton" >
    <constructor-arg ref="jdbcTemplate"/>
  </bean>
   <bean id="operationExpectedRepo" class="com.normation.rudder.repository.jdbc.OperationExpectedReportsJdbcRepository" lazy-init="true" scope="singleton" >
    <constructor-arg ref="jdbcTemplate"/>
  </bean>
  
 <!-- Event Log part --> 
  <bean id="eventLogRepository" class="com.normation.rudder.repository.inMemory.InMemoryEventLogRepository" lazy-init="true" scope="singleton" >
  </bean>

   <bean id="jdbcEventLogRepository" class="com.normation.rudder.repository.jdbc.EventLogJdbcRepository" lazy-init="true" scope="singleton" >
       <constructor-arg ref="jdbcTemplate"/>
   </bean>
    
   <bean id="eventLogService" class="com.normation.rudder.services.log.EventLogServiceImpl" lazy-init="true">
    <constructor-arg ref="eventLogRepository"/>
    <constructor-arg ref="eventLogConverter"/>
    
  </bean>
  
  <bean id="guiEventLogSpecializer" class="com.normation.rudder.domain.log.specializer.GuiEventLogSpecializer"/>
  
  <bean id="inventoryEventLogSpecializer" class="com.normation.rudder.domain.log.specializer.InventoryEventLogSpecializer"/>
  
  <bean id="directiveEventLogSpecializer" class="com.normation.rudder.domain.log.specializer.DirectiveEventLogSpecializer">
    <constructor-arg ref = "rudderVariableParser" />
  </bean>
  
  <bean id="serverEventLogSpecializer" class="com.normation.rudder.domain.log.specializer.NodeEventLogSpecializer"/>
  
  <bean id="eventLogConverter" class="com.normation.eventlog.EventLogConverter">
    <constructor-arg>
      <list>
        <ref bean="directiveEventLogSpecializer"/>
        <ref bean="serverEventLogSpecializer"/>
        <ref bean="inventoryEventLogSpecializer"/>
        <ref bean="guiEventLogSpecializer"/>
      </list>
    </constructor-arg>
  </bean>
  
  <bean id="reportsRepository" class="com.normation.rudder.repository.jdbc.ReportsJdbcRepository">
    <constructor-arg ref="jdbcTemplate"/>
  </bean>
  
  <!-- JDBC connectivity -->

  <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="locations" value="classpath:database.properties"/>
  </bean>

  <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="${jdbc.driverClassName}" />
    <property name="url" value="${jdbc.url}" />
    <property name="username" value="${jdbc.username}" />
    <property name="password" value="${jdbc.password}" />
  </bean>

  <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
    <property name="dataSource"><ref bean="dataSource"/></property>
  </bean>

<!--   <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
      <property name="driverClassName" value="org.postgresql.Driver"/>
      <property name="url" value="jdbc:postgresql://localhost:5432/test"/>
      <property name="username" value="test"/>
      <property name="password" value="test"/>
      <property name="maxIdle" value="10"/>
      <property name="maxActive" value="100"/>
      <property name="maxWait" value="10000"/>
      <property name="validationQuery" value="select 1"/>
      <property name="testOnBorrow" value="false"/>
      <property name="testWhileIdle" value="true"/>
      <property name="timeBetweenEvictionRunsMillis" value="1200000"/>
      <property name="minEvictableIdleTimeMillis" value="1800000"/>
      <property name="numTestsPerEvictionRun" value="5"/>
      <property name="defaultAutoCommit" value="true"/>
  </bean>

   -->
  
</beans>

